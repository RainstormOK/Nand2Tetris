// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    ////zx 
    Or161 (a = x, b = zx, out = fx); // if zx == 1, then fx = all 1; else fx = x
    Not16 (in = fx, out = nfx); //if zx == 1, then nfx = ~fx = all 0;
    Not (in = zx, out = nzx); //Now we make a choice
    And1 (a = x, b = nzx, out = zx0);
    And1 (a = nfx, b = zx, out = zx1);
    Or16 (a = zx1, b = zx0, out = zxresult);

    ////nx
    Not16 (in = zxresult, out = nzxresult); //nzxresult = !zxresult
    Not (in = nx, out = nnx);
    And1 (a = nzxresult, b = nx, out = nx0); // make a choice
    And1 (a = zxresult, b = nnx, out = nx1);
    Or16 (a = nx0, b = nx1, out = nxresult);


    ////zy 
    Or161 (a = y, b = zy, out = fy); //if zy == 1, then fy = y=all 1 ; else fy = y;
    Not16 (in = fy, out = nfy); // if zy == 1, then nfy = ~fy = all 0;
    Not (in = zy, out = nzy); //Now we make a choice
    And1 (a = y, b = nzy, out = zy0); 
    And1 (a = nfy, b = zy, out = zy1);
    Or16 (a = zy1, b = zy0, out = zyresult);

    //ny
    Not16 (in = zyresult, out = nzyresult); //nzyresult = !zyresult
    Not (in = ny, out = nny);
    And1 (a = nzyresult, b = ny, out = ny0); // make a choice
    And1 (a = zyresult, b = nny, out = ny1);
    Or16 (a = ny0, b = ny1, out = nyresult);

    //f
    Add16 (a = nxresult, b = nyresult, out = addition); 
    And16 (a = nxresult, b = nyresult, out = dand);
    And1 (a = addition, b = f, out = aadd);
    Not (in = f, out = nf);
    And1 (a = dand, b = nf, out = aand);
    Or16 (a = aadd, b = aand, out = result);
      
    //no
    Not16 (in = result, out = nresult);
    Not (in = no, out = nno);

    And1 (a = result, b = nno, out = o1);

    And1 (a = nresult, b = no, out = o2);

    Or16 (a = o1, b = o2, out = fout);
    Or16 (a = o1, b = o2, out[15] = fout15);
    Not16 (in = fout, out = nout);
    Not16 (in = nout, out = out);

    //zr
    Orjustify0 (in = fout, out = nzr);
    Not (in = nzr, out = zr);

    //ng
    Not (in = fout15, out = nng);
    Not (in = nng, out = ng);
}